name: Node.js Application CI/CD

on:
  push:
    paths:
      - 'node-todo-app/**'
    branches: [ "master" ]
  pull_request:
    paths: 
      - 'node-todo-app/**'
    branches: [ "master" ]

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: mmy-ecr-repo
  ECS_SERVICE: my-ecs-service
  ECS_CLUSTER: my-ecs-cluster
  CONTAINER_IMAGE: ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

jobs:

  build-and-push-docker-image:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
        
    - name: Build, tag, and push Docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t ${{ env.CONTAINER_IMAGE }} ./node-app
        docker push ${{ env.CONTAINER_IMAGE }}
        
  deploy-to-ecs:
    needs: build-and-push-docker-image
    
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS Credentials  
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Deploy to ECS
      run: |
        # Update ECS task definition with the new container image
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment --task-definition task-definition.json