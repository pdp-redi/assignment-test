name: Build and Deploy to ECS

on:
  workflow_dispatch: # Manually trigger the workflow

env:
  AWS_REGION: ap-south-1 
  ECR_REPOSITORY: my-ecr-repo 
  ECS_CLUSTER: my-ecs-cluster 

jobs:

  build-and-push-docker-image:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
        
    - name: Build, tag, and push Docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        CONTAINER_IMAGE: ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
      run: |
        docker build -t $CONTAINER_IMAGE ./node-app
        docker push $CONTAINER_IMAGE
        
  deploy-to-ecs:
    name: Deploy to ECS
    needs: build-and-push-docker-image
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS Credentials  
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to ECS
      run: |
        # Update ECS service with the new container image
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} \
                                --service ${{ env.ECS_SERVICE }} \
                                --force-new-deployment


# name: Build and Deploy to ECS

# # on:
# #     workflow_run:
# #       workflows: ["Provision Infrastructure"]
# #       types:
# #         - completed

# on:
#     workflow_dispatch:

# # on:
# #   push:
# #     branches:
# #       - master

# env:
#   AWS_REGION: ap-south-1 
#   ECR_REPOSITORY: my-ecr-repo 
#   ECS_CLUSTER: my-ecs-cluster 

# jobs:
#   build-and-push-to-ecr:
#     name: Build Docker image and push to ECR
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Log in to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v2

#     - name: Build, tag, and push Docker image to ECR
#       run: |
#         # Build Docker image
#         docker build -t $ECR_REPOSITORY:$GITHUB_SHA .
        
#         # Tag the image with the ECR repository URI
#         IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$GITHUB_SHA"
#         docker tag $ECR_REPOSITORY:$GITHUB_SHA $IMAGE_URI
        
#         # Push the image to ECR
#         docker push $IMAGE_URI

#     - name: Output the image URI
#       run: echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

#   deploy-to-ecs:
#     name: Deploy to Amazon ECS
#     needs: build-and-push-to-ecr
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v3
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Deploy to ECS
#       run: |
#         # Update the ECS service to use the new image
#         aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} \
#                                --service ${{ env.ECS_SERVICE }} \
#                                --force-new-deployment \
#                                --output json \
#                                --region ${{ env.AWS_REGION }}





# name: Node.js Application CI/CD

# on:
#   push:
#     paths:
#       - 'node-todo-app/**'
#     branches: [ "master" ]
#   pull_request:
#     paths: 
#       - 'node-todo-app/**'
#     branches: [ "master" ]

# env:
#   AWS_REGION: ap-south-1
#   ECR_REPOSITORY: mmy-ecr-repo
#   ECS_SERVICE: my-ecs-service
#   ECS_CLUSTER: my-ecs-cluster
#   CONTAINER_IMAGE: ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

# jobs:

#   build-and-push-docker-image:
#     runs-on: ubuntu-latest
    
#     steps:
#     - uses: actions/checkout@v2
    
#     - name: Configure AWS Credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ secrets.AWS_REGION }}
        
#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1
        
#     - name: Build, tag, and push Docker image to Amazon ECR
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#       run: |
#         docker build -t ${{ env.CONTAINER_IMAGE }} ./node-app
#         docker push ${{ env.CONTAINER_IMAGE }}
        
#   deploy-to-ecs:
#     needs: build-and-push-docker-image
    
#     runs-on: ubuntu-latest
    
#     steps:
#     - name: Configure AWS Credentials  
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ secrets.AWS_REGION }}
        
#     - name: Deploy to ECS
#       run: |
#         # Update ECS task definition with the new container image
#         aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment --task-definition task-definition.json