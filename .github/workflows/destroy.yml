name: Node.js Application CI/CD

on:
  workflow_dispatch: # Manually trigger the workflow

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: my-node-app-ecr
  ECS_SERVICE: my-node-app-service
  ECS_CLUSTER: my-node-app-cluster
  CONTAINER_IMAGE: ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

jobs:

  build-and-push-docker-image:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
        
    - name: Build, tag, and push Docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t ${{ env.CONTAINER_IMAGE }} ./node-app
        docker push ${{ env.CONTAINER_IMAGE }}
        
  deploy-to-ecs:
    name: Deploy to ECS
    needs: build-and-push-docker-image
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS Credentials  
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to ECS
      run: |
        # Update ECS service with the new container image
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} \
                                --service ${{ env.ECS_SERVICE }} \
                                --force-new-deployment




# name: Terraform AWS Destroy

# on:
#   workflow_dispatch: # Manually triggered

# jobs:
#   destroy:
#     name: 'Terraform Destroy'
#     runs-on: ubuntu-latest



#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4 # Node.js 20 compatible

#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v3 # Node.js 20 compatible
#       with:
#         terraform_version: 1.0.0

#     - name: Configure AWS Credentials
#       uses: aws-actions/configure-aws-credentials@v3 # Node.js 16, will soon run on Node.js 20
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ secrets.AWS_REGION }}

#     - name: Terraform Init
#       run: terraform init

#     - name: Terraform Plan Destroy
#       run: terraform plan -destroy -out=tfplan-destroy

#     - name: Terraform Apply Destroy
#       run: terraform apply -auto-approve tfplan-destroy